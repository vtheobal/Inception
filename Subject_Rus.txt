**__INCEPTION__**

Цель этого проекта разширить ваши знания о системном администрировании, используя докер.
Вы должны виртуализировать несколько Докер-образов, создав их на своей новой виртуальной машине.

Этот проект должен быть сделан на виртуальной машине.
* Все, требуемые для кофигурации файлы вашего проекта должны находиться в папке srcs
* Makefile так же требуется разместить в корне вашей директории. Он должен настроить все ваше приложение 
(т.е. он должен создавать образы Docker, используя
docker-compose.yml).
* Этот сабж требует воплтотить в жизнь проект, зависящий от вашего бэкграунда. Вы можете что-то не знать.
Мы советуем вам не стесняться читать много документации, посвященной использованию докера, как
и все, что может быть полезно для изучения.


Этот проект состоит из создания маленькой инфраструктуры, состоящей из разных сервисов с использованием
специальных правил. Весь проект должен быть выполнен на виртуальной машине. Вы так же должны 
использовать докер-компос.

Каждый докер-образ должен иметь соответсвующее имя, в зависимости от сервиса.
Каждый сервис должен находиться в соответсвующем контейнере.
По сообраажением производительности, контейнеры должны быть построены на последней
стабильной версии Альпин Линукс или Дебиан Бастер. Выбор на ваше усмотрение.


Вы также должны написать свои собственные Докерфайлы, один для каждого сервиса. Dockerfiles должны
вызываться в вашем docker-compose.yml вашим Makefile.

Это значит, что вы должны построить докер-образ вашего проекта

Запрещается вытаскивать готовые образы Docker, а также использовать такие сервисы, как DockerHub.
(Alpine / Debian исключены из этого правила).





Вы должны установить:
* Докер-контейнер, включающий в себя NGINX c TLSv1.2 или TLSv1.3
* Докер-контейнер, включающий в себя WordPress + php-fpm (он должен быть загружен и сконфигурирован) без NGINX
* Докер-контейнер, включающий MAriaDB без nginx
* Том, содержащий базу данных WordPress
* Второй том, содержащий файлы вебсайта WordPress'a
* Докер-сеть, которая устанавливает соединение между вашими контейнерами.
Ваши контейнеры должны перезапускаться в случае сбоя.


Докер-контейнер - это не виртуальная машина. Поэтому, не рекомендуется использовать хакерские патчи
типа `tail -f` и тд, когда пытаетесь запустить его. Прочитайте о работе с демонами и о 
том хорошая ли идея их использовать.

Конечно, использование network: host или --link или links: запрещено.
Сетевая строка должна присутствовать в вашем файле docker-compose.yml.
Ваши контейнеры не должны запускаться командой, выполняющей бесконечную
петлю. Таким образом, это также относится к любой команде, используемой в качестве точки входа, или
используется в сценариях точек входа. Ниже приведены несколько запрещенных хакерских атак.
патчи: tail -f, bash, sleep infinity, while true.

Прочитайте о PID 1 и лучших практиках по написанию Докерфайлов

В вашей базе Wordpress'a должно быть 2 пользователя, один из них администратор. Имя администратора не должно состоять из 
admin/Admin или administrator/Administrator (e.g., admin, administrator, Administrator, admin-123, and
so forth).

Ваши тома будут доступны в папке / home / login / data на
хост-машине с использованием Docker. Разумеется, нужно сменить логин на твой.


Чтобы упростить задачу, вам нужно настроить свое доменное имя так, чтобы оно указывало на ваш
локальный IP-адрес.
Это доменное имя должно быть login.42.fr. Опять же, вы должны использовать свой собственный логин.
Например, если ваш логин - wil, wil.42.fr будет перенаправлять на IP-адрес, указывающий на
веб-сайт Wil'a

Последний тег запрета.
В ваших файлах Dockerfiles не должно быть пароля.
Обязательно использовать переменные среды.
Также настоятельно рекомендуется использовать файл .env для хранения
переменные среды. Файл .env должен находиться в корне
каталога srcs.
Ваш контейнер NGINX должен быть единственной точкой входа в ваш
инфраструктура только через порт 443, используя TLSv1.2 или TLSv1.3
протокол.